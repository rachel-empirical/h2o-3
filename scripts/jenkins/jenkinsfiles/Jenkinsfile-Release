def NODE_LABEL = 'master'
def REGISTRY = 'docker.h2o.ai'
def IMAGE = 'docker.h2o.ai/opsh2oai/h2o-3-runtime:102'
def S3_ROOT = 's3://test.0xdata.com/release-test/h2o'
def AWS_CREDENTIALS_ID = 'AWS S3 Credentials'

ansiColor('xterm') {
    timestamps {

        node(NODE_LABEL) {

            // FIXME
            env.BRANCH_NAME = 'master' // env.BRANCH_NAME.replaceAll('/', '_')

            env.BRANCH_DIR = "/builds2/h2o/${env.BRANCH_NAME}"
            env.BUILD_NUMBER_DIR = "${env.BRANCH_DIR}/${currentBuild.number}"
            env.DATA_DIR = "/home/0xdiag"

            env.BUILD_LOG_FILE = "${env.BUILD_NUMBER_DIR}/log.txt"

            env.GRADLE_OPTS = "-Xmx4g -XX:MaxPermSize=512m"

            env.NIGHTLY_BUILD = "true"

            env.PYTHON_VERSION = '2.7'
            env.R_VERSION = '3.4.1'

            stage('Checkout') {
                dir("${env.BUILD_NUMBER_DIR}/h2o") {
                    retry(5) {
                        timeout(1) {
                            checkout scm
                        }
                    }
                    env.THIS_BUILD_GIT_HASH_LONG = sh(script: 'git rev-parse --verify HEAD', returnStdout: true).trim()
                    env.THIS_BUILD_GIT_HASH_SHORT = sh(script: 'git describe --always', returnStdout: true).trim()
                    if (fileExists('../../lastSuccessfulBuild')) {
                        env.LAST_SUCCESSFUL_BUILD_GIT_HASH_SHORT = sh(script: '(cd ../../lastSuccessfulBuild/h2o; git describe --always)', returnStdout: true).trim()
                    }
                }
            }

            stage('Build') {

                withCredentials([usernamePassword(credentialsId: REGISTRY, usernameVariable: 'REGISTRY_USERNAME', passwordVariable: 'REGISTRY_PASSWORD')]) {
                    sh "docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD ${REGISTRY}"
                    sh "docker pull ${IMAGE}"
                }

                docker.withRegistry("https://${REGISTRY}") {
                    docker.image(IMAGE).inside("-v /home/0xdiag/smalldata:/home/0xdiag/smalldata -v /home/0xdiag/bigdata:/home/0xdiag/bigdata -v /builds2/h2o/${env.BRANCH_NAME}:/builds2/h2o/${env.BRANCH_NAME}") {
                        sh """
        
                            # Log commands.
                            set -x
                            # Stop on error.
                            set -e
        
                            export JAVA_HOME=/usr/lib/jvm/java-8-oracle
                            echo "Activating Python ${env.PYTHON_VERSION}"
                            . /envs/h2o_env_python${env.PYTHON_VERSION}/bin/activate
                            echo "Activating R ${env.R_VERSION}"
                            activate_R_${env.R_VERSION}
        
                            mkdir -p ${env.BUILD_NUMBER_DIR}
        
                            # Do everything in the job directory.  Ignore the standard jenkins workspace.
                            cd ${env.BUILD_NUMBER_DIR}
        
                            # Log some stuff for debug purposes.
                            date
                            pwd
                            env
                            echo \$PATH
                            which java
                            java -version
                            du -h
        
                            cd h2o
        
                            # Update the build number.
                            mkdir -p ci
                            echo "BUILD_NUMBER=${currentBuild.number}" > gradle/buildnumber.properties
                            echo "BUILD_BRANCH_NAME=${env.BRANCH_NAME}" > gradle/git.properties
                            echo "BUILD_HASH=${env.THIS_BUILD_GIT_HASH_LONG}" >> gradle/git.properties
                            echo "BUILD_HASH_SHORT=${env.THIS_BUILD_GIT_HASH_SHORT}" >> gradle/git.properties
        
                            # Log some git stuff for debug purposes.
                            echo
                            echo GIT INFO
                            echo
                            git branch | grep '*' | sed 's/* //'
                            git log -1 --format="%H"
                            git describe --always --dirty
                            git status
                            if [ -e ../../lastSuccessfulBuild ]; then
                                echo
                                echo
                                # FIXME
                                # git log --pretty=oneline ${env.LAST_SUCCESSFUL_BUILD_GIT_HASH_SHORT}..${env.THIS_BUILD_GIT_HASH_SHORT}
                                echo
                                echo
                                # FIXME
                                # git log ${env.LAST_SUCCESSFUL_BUILD_GIT_HASH_SHORT}..${env.THIS_BUILD_GIT_HASH_SHORT}
                                echo
                                echo
                            fi
        
                            # Do the build.
                            if [ -n "${env.DATA_DIR}" ]; then
                                rm -f -r smalldata
                                ln -s "${env.DATA_DIR}/smalldata"
                                rm -f -r bigdata
                                ln -s "${env.DATA_DIR}/bigdata"
                            else
                                ./gradlew syncSmalldata
                            fi
                            ./gradlew build -x test
                            ./gradlew buildH2oDevDist
                        """
                    }
                }
            }

            env.PROJECT_VERSION = sh(script: "cd ${env.BUILD_NUMBER_DIR}/h2o && cat target/project_version", returnStdout: true).trim()
            env.SHA256_HASH = sh(script: "cd ${env.BUILD_NUMBER_DIR}/h2o && sha256sum target/h2o-*${currentBuild.number}.zip", returnStdout: true).trim()

                stage('Tag') {
                    sh """
                        cd ${env.BUILD_NUMBER_DIR}/h2o
                        git tag -a jenkins-${env.BRANCH_NAME}-${currentBuild.number} -m "Jenkins build branch_name ${env.BRANCH_NAME} build_number ${env.PROJECT_VERSION}"
                        git push --tags
                    """
                }

                stage ('Publish to S3') {
                    docker.withRegistry("https://${REGISTRY}") {
                        withCredentials([file(credentialsId: 'c096a055-bb45-4dac-ba5e-10e6e470f37e', variable: 'JUNIT_CORE_SITE_PATH'), [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: AWS_CREDENTIALS_ID, secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            docker.image(IMAGE).inside("-e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} -v /builds2/h2o/${env.BRANCH_NAME}:/builds2/h2o/${env.BRANCH_NAME}") {
                                sh """
                                    cd ${env.BUILD_NUMBER_DIR}/h2o

                                    # Publish the output to S3.
                                    s3cmd --rexclude='target/maven' --acl-public sync target/ ${S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/

                                    # This is really awful.  This old version of s3cmd does not set Content-Encoding metadata in S3.
                                    # The newer version of s3cmd sets the Content-Encoding to UTF-8 and gradle fails.
                                    # Alternately, we could strip off the Content-Encoding metadata tag for every file underneath maven.

                                    # Puts latest R pacakge of h2o-3 into latest_R dir on s3
                                    s3cmd del ${S3_ROOT}/latest_stable_R/h2o_*.tar.gz
                                    s3cmd --acl-public -r put target/R/ ${S3_ROOT}/latest_stable_R/

                                    # Puts latest Py pacakge of h2o-3 into latest_Py dir on s3
                                    s3cmd del ${S3_ROOT}/latest_stable_Py/h2o-*.tar.gz
                                    s3cmd --acl-public -r put target/Python/ ${S3_ROOT}/latest_stable_Py/

                                    s3cmd --acl-public sync target/maven/ ${S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/maven/
                                    s3cmd --acl-public put target/sha256.txt ${S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/sha256.txt

                                    echo EXPLICITLY SET MIME TYPES AS NEEDED
                                    list_of_html_files=`find target -name '*.html' | sed 's/target\\///g'`
                                    echo \${list_of_html_files}
                                    for f in \${list_of_html_files}
                                    do
                                        s3cmd --acl-public --mime-type text/html put target/\${f} ${S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/\${f}
                                    done

                                    list_of_js_files=`find target -name '*.js' | sed 's/target\\///g'`
                                    echo \${list_of_js_files}
                                    for f in \${list_of_js_files}
                                    do
                                        s3cmd --acl-public --mime-type text/javascript put target/\${f} ${S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/\${f}
                                    done

                                    list_of_css_files=`find target -name '*.css' | sed 's/target\\///g'`
                                    echo \${list_of_css_files}
                                    for f in \${list_of_css_files}
                                    do
                                        s3cmd --acl-public --mime-type text/css put target/\${f} ${S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/\${f}
                                    done

                                    echo UPDATE LATEST POINTER
                                    tmpdir=./buildh2odev.tmp
                                    mkdir -p \${tmpdir}
                                    echo ${currentBuild.number} > \${tmpdir}/latest
                                    echo "<head>" > \${tmpdir}/latest.html
                                    echo "<meta http-equiv=\\"refresh\\" content=\\"0; url=${currentBuild.number}/index.html\\" />" >> \${tmpdir}/latest.html
                                    echo "</head>" >> \${tmpdir}/latest.html

                                    s3cmd --acl-public put \${tmpdir}/latest ${S3_ROOT}/${env.BRANCH_NAME}/latest
                                    s3cmd --acl-public put \${tmpdir}/latest.html ${S3_ROOT}/${env.BRANCH_NAME}/latest.html
                                    s3cmd --acl-public put \${tmpdir}/latest.html ${S3_ROOT}/${env.BRANCH_NAME}/index.html
                                """
                            }
                        }
                    }
                }

            //    stage('Update Last Successful Build') {
            //        sh """
            //            cd ${env.BRANCH_DIR}
            //            rm -f lastSuccessfulBuild
            //            ln -s ${currentBuild.number} lastSuccessfulBuild
            //        """
            //    }
        }
    }
}